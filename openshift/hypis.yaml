apiVersion: v1
kind: ConfigMap
metadata:
  name: hypis-conf
data:
  app.ini: |
    [pipeline:main]
    pipeline:
      proxy-prefix
      h

    [app:h]
    use: call:h.app:create_app
    mail.host = relay.unc.edu
    mail.port = 25
    mail.queue_path = /tmp/mailqueue
    mail.debug = 1

    [filter:proxy-prefix]
    use: egg:PasteDeploy#prefix

    [server:main]
    use: egg:gunicorn#main
    #bind: unix:/tmp/gunicorn-web.sock
    host: 0.0.0.0
    port: 5000
    proc_name: web

    [loggers]
    keys = root, alembic, gunicorn.error, h

    [handlers]
    keys = console

    [formatters]
    keys = generic

    [logger_root]
    level = WARNING
    handlers = console

    [logger_alembic]
    level = INFO
    handlers =
    qualname = alembic

    [logger_gunicorn.error]
    level = INFO
    handlers =
    qualname = gunicorn.error

    [logger_h]
    level = INFO
    handlers =
    qualname = h

    [handler_console]
    level = NOTSET
    class = StreamHandler
    args = ()
    formatter = generic

    [formatter_generic]
    format = %(asctime)s [%(process)d] [%(name)s:%(levelname)s] %(message)s
  
  websocket.ini: |
    [app:main]
    use: call:h.streamer:create_app

    [server:main]
    use: egg:gunicorn#main
    #bind: unix:/tmp/gunicorn-websocket.sock
    host: localhost
    port: 5001
    worker_class: h.streamer.Worker
    graceful_timeout: 0
    proc_name: websocket
    worker_connections: 4096

    [loggers]
    keys = root, gunicorn.error

    [handlers]
    keys = console

    [formatters]
    keys = generic

    [logger_root]
    level = WARNING
    handlers = console

    [logger_gunicorn.error]
    level = INFO
    handlers =
    qualname = gunicorn.error

    [handler_console]
    level = NOTSET
    class = StreamHandler
    args = ()
    formatter = generic

    [formatter_generic]
    format = %(asctime)s [%(process)d] [%(name)s:%(levelname)s] %(message)s


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hypis
  labels:
    app: hypis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hypis
  template:
    metadata:
      labels:
        app: hypis
    spec:
      containers:

      - name: hypis-web
        image: hypothesis/hypothesis:latest
        command:
        - pserve
        args:
        - conf/app.ini
        ports:
        - containerPort: 5000
          name: http
        volumeMounts:
        - name: hypis-conf
          mountPath: "/var/lib/hypothesis/conf"
        envFrom:
        - secretRef:
            name: hyp-secrets
        env:
        - name: APP_URL
          value: http://localhost:5000
        - name: AUTHORITY
          value: localhost
        - name: BROKER_URL
          value: amqp://rabbit:$(RABBITMQ_DEFAULT_PASS)@hyp-mq:$(HYP_MQ_SERVICE_PORT)/
        - name: DATABASE_URL
          value: postgresql://postgres:$(POSTGRES_PASSWORD)@hyp-db/postgres
        - name: ELASTICSEARCH_URL
          value: http://hyp-es:9200

      - name: hypis-ws
        image: hypothesis/hypothesis:latest
        command:
        - pserve
        args:
        - conf/websocket.ini
        ports:
        - containerPort: 5001
          name: ws
        volumeMounts:
        - name: hypis-conf
          mountPath: "/var/lib/hypothesis/conf"
        envFrom:
        - secretRef:
            name: hyp-secrets
        env:
        - name: APP_URL
          value: http://localhost:5000
        - name: AUTHORITY
          value: localhost
        - name: BROKER_URL
          value: amqp://rabbit:$(RABBITMQ_DEFAULT_PASS)@hyp-mq:$(HYP_MQ_SERVICE_PORT)/
        - name: DATABASE_URL
          value: postgresql://postgres:$(POSTGRES_PASSWORD)@hyp-db/postgres
        - name: ELASTICSEARCH_URL
          value: http://hyp-es:9200

      - name: hypis-worker
        image: hypothesis/hypothesis:latest
        resources:
          requests:
            memory: 512Mi
          limits:
            memory: 1Gi
        command:
        - bin/hypothesis
        args:
        - celery
        - worker
        - "--loglevel=INFO"
        volumeMounts:
        - name: hypis-conf
          mountPath: "/var/lib/hypothesis/conf"
        envFrom:
        - secretRef:
            name: hyp-secrets
        env:
        - name: APP_URL
          value: http://localhost:5000
        - name: AUTHORITY
          value: localhost
        - name: BROKER_URL
          value: amqp://rabbit:$(RABBITMQ_DEFAULT_PASS)@hyp-mq:$(HYP_MQ_SERVICE_PORT)/
        - name: DATABASE_URL
          value: postgresql://postgres:$(POSTGRES_PASSWORD)@hyp-db/postgres
        - name: ELASTICSEARCH_URL
          value: http://hyp-es:9200

      volumes:
      - name: hypis-conf
        configMap:
          name: hypis-conf
